# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '23 11 * * 3'
env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest


    steps:

    # Initializes the CodeQL tools for scanning.

        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)

    - name: 'Checkout'
      uses: actions/checkout@v2
      with:
        path: ${{ github.workspace }}/obs-midi
        submodules: 'recursive'
        
    - name: 'Checkout OBS'
      uses: actions/checkout@v2
      with:
        repository: obsproject/obs-studio
        path: ${{ github.workspace }}/obs-studio
        submodules: 'recursive'
    - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
          with:
            languages:  cpp
    - name: 'Get OBS-Studio git info'
      shell: bash
      working-directory: ${{ github.workspace }}/obs-studio
      run: |
        git fetch --prune --unshallow
        echo ::set-env name=OBS_GIT_BRANCH::$(git rev-parse --abbrev-ref HEAD)
        echo ::set-env name=OBS_GIT_HASH::$(git rev-parse --short HEAD)
        echo ::set-env name=OBS_GIT_TAG::$(git describe --tags --abbrev=0)
    - name: 'Checkout last OBS-Studio release (${{ env.OBS_GIT_TAG }})'
      shell: bash
      working-directory: ${{ github.workspace }}/obs-studio
      run: |
        git checkout ${{ env.OBS_GIT_TAG }}
        git submodule update
    - name: 'Get obs-midi git info'
      working-directory: ${{ github.workspace }}/obs-midi
      run: |
        git fetch --prune --unshallow
        echo ::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}
        echo ::set-env name=GIT_HASH::$(git rev-parse --short HEAD)
        echo ::set-env name=GIT_TAG::$(git describe --tags --abbrev=0)
    - name: 'Install prerequisites (Apt)'
      shell: bash
      run: |
        sudo dpkg --add-architecture amd64
        sudo apt-get -qq update
        sudo apt-get install -y \
         build-essential \
         checkinstall \
         cmake \
         libasound2-dev \
         libavcodec-dev \
         libavdevice-dev \
         libavfilter-dev \
         libavformat-dev \
         libavutil-dev \
         libcurl4-openssl-dev \
         libfdk-aac-dev \
         libfontconfig-dev \
         libfreetype6-dev \
         libgl1-mesa-dev \
         libjack-jackd2-dev \
         libjansson-dev \
         libluajit-5.1-dev \
         libpulse-dev \
         libqt5x11extras5-dev \
         libspeexdsp-dev \
         libswresample-dev \
         libswscale-dev \
         libudev-dev \
         libv4l-dev \
         libva-dev \
         libvlc-dev \
         libx11-dev \
         libx264-dev \
         libx11-xcb-dev \
         libx11-xcb1 \
         libxcb-randr0-dev \
         libxcb-shm0-dev \
         libxcb-xinerama0-dev \
         libxcomposite-dev \
         libxinerama-dev \
         libmbedtls-dev \
         pkg-config \
         python3-dev \
         qtbase5-dev \
         libqt5svg5-dev \
         swig
    - name: 'Configure OBS-Studio'
      working-directory: ${{ github.workspace }}/obs-studio
      shell: bash
      run: |
        mkdir ./build
        cd ./build
        cmake -DDISABLE_PLUGINS=YES -DENABLE_SCRIPTING=NO -DUNIX_STRUCTURE=YES -DCMAKE_INSTALL_PREFIX=/usr ..
    - name: 'Build OBS-Studio'
      working-directory: ${{ github.workspace }}/obs-studio
      shell: bash
      run: |
        set -e
        cd ./build
        make -j4 libobs obs-frontend-api
    - name: 'Install OBS-Studio'
      working-directory: ${{ github.workspace }}/obs-studio
      shell: bash
      run: |
        cd ./build
        sudo cp ./libobs/libobs.so /usr/lib
        sudo cp ./UI/obs-frontend-api/libobs-frontend-api.so /usr/lib
        sudo mkdir -p /usr/include/obs
        sudo cp ../UI/obs-frontend-api/obs-frontend-api.h /usr/include/obs/obs-frontend-api.h
    - name: 'Configure obs-midi'
      working-directory: ${{ github.workspace }}/obs-midi
      shell: bash
      run: |
        mkdir ./build
        cd ./build
        cmake -DLIBOBS_INCLUDE_DIR=${{ github.workspace }}/obs-studio/libobs -DCMAKE_INSTALL_PREFIX=/usr ..
    - name: Autobuild
        uses: github/codeql-action/autobuild@v1



    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö https://git.io/JvXDl

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

  - name: Perform CodeQL Analysis
    uses: github/codeql-action/analyze@v1
