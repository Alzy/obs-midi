name: 'CI Multiplatform Build and release'

on:
  push:
    branches:
      - release
      - master
      - test
    paths-ignore:
      - 'docs/**'
  pull_request:
    paths-ignore:
      - '**.md'

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
jobs:
  windows:
    name: 'Windows 32+64bit'
    runs-on: [windows-latest]
    if: contains(github.event.head_commit.message, '[skip ci]') != true
    env:
      QT_VERSION: '5.15.2'
      WINDOWS_DEPS_VERSION: '2017'
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      CMAKE_SYSTEM_VERSION: "10.0"
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      isCI: true
    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.0
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/obs-midi
          submodules: 'recursive'
      - name: 'Checkout OBS'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: ${{ github.workspace }}/obs-studio
          submodules: 'recursive'
      - name: 'Get OBS-Studio git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=OBS_GIT_BRANCH::$(git rev-parse --abbrev-ref HEAD)
          echo ::set-env name=OBS_GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=OBS_GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Checkout last OBS-Studio release (${{ env.OBS_GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git checkout ${{ env.OBS_GIT_TAG }}
          git submodule update
      - name: 'Get obs-midi git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-midi
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}
          echo ::set-env name=GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Restore QT from Cache: QT'
        uses: actions/cache@v2
        env: 
          CACHE_NAME: 'deps-cache-qt'
        with:
          path: ${{ github.workspace }}\cmbuild\QT
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.QT_VERSION }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
      - name: 'Set QT to Cache: QT'
        if: steps.deps-cache-qt.outputs.cache-hit != 'true'
        run: |
          curl -kLO https://cdn-fastly.obsproject.com/downloads/Qt_${{ env.QT_VERSION }}.7z -f --retry 5 -C -
          7z x Qt_${{ env.QT_VERSION }}.7z -o"${{ github.workspace }}\cmbuild\QT"
      - name: 'Restore OBSDeps from Cache:'
        uses: actions/cache@v2
        env: 
          CACHE_NAME: 'deps-cache-deps'
        with:
          path: ${{ github.workspace }}\cmbuild\deps
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.WINDOWS_DEPS_VERSION }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
      - name: 'Install prerequisite: Pre-built OBS dependencies'
        if: steps.deps-cache-deps.outputs.cache-hit != 'true'
        run: |
          curl -kLO https://cdn-fastly.obsproject.com/downloads/dependencies${{ env.WINDOWS_DEPS_VERSION }}.zip -f --retry 5 -C -
          7z x dependencies${{ env.WINDOWS_DEPS_VERSION }}.zip -o"${{ github.workspace }}\cmbuild\deps"
         
      - name: 'Restore OBS 32-bit build v${{ env.OBS_GIT_TAG }} from cache'
        id: build-cache-obs-32
        uses: actions/cache@v1
        env:
          CACHE_NAME: 'build-cache-obs-32'
        with:
          path: ${{ github.workspace }}/obs-studio/build32
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.OBS_GIT_TAG }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
      - name: 'Configure OBS 32-bit'
        if: steps.build-cache-obs-32.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir .\build32
          cd .\build32
          cmake -G "${{ env.CMAKE_GENERATOR }}" -A Win32 -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DQTDIR="${{ github.workspace }}\cmbuild\QT\${{ env.QT_VERSION }}\msvc2019" -DDepsPath="${{ github.workspace }}\cmbuild\deps\win32" -DCOPIED_DEPENDENCIES=NO -DCOPY_DEPENDENCIES=YES ..
      - name: 'Build OBS-Studio 32-bit'
        if: steps.build-cache-obs-32.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          msbuild /m /p:Configuration=RelWithDebInfo .\build32\libobs\libobs.vcxproj
          msbuild /m /p:Configuration=RelWithDebInfo .\build32\UI\obs-frontend-api\obs-frontend-api.vcxproj
      - name: 'Restore OBS 64-bit build v${{ env.OBS_GIT_TAG }} from cache'
        id: build-cache-obs-64
        uses: actions/cache@v1
        env:
          CACHE_NAME: 'build-cache-obs-64'
        with:
          path: ${{ github.workspace }}/obs-studio/build64
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.OBS_GIT_TAG }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
      - name: 'Configure OBS 64-bit'
        if: steps.build-cache-obs-64.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir .\build64
          cd .\build64
          cmake -G "${{ env.CMAKE_GENERATOR }}" -A x64 -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DQTDIR="${{ github.workspace }}\cmbuild\QT\${{ env.QT_VERSION }}\msvc2019_64" -DDepsPath="${{ github.workspace }}\cmbuild\deps\win64" -DCOPIED_DEPENDENCIES=NO -DCOPY_DEPENDENCIES=YES ..
      - name: 'Build OBS-Studio 64-bit'
        if: steps.build-cache-obs-64.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          msbuild /m /p:Configuration=RelWithDebInfo .\build64\libobs\libobs.vcxproj
          msbuild /m /p:Configuration=RelWithDebInfo .\build64\UI\obs-frontend-api\obs-frontend-api.vcxproj
      - name: 'Configure obs-midi 64-bit'
        working-directory: ${{ github.workspace }}/obs-midi
        run: |
          mkdir .\build64
          cd .\build64
          cmake -G "${{ env.CMAKE_GENERATOR }}" -A x64 -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DQTDIR="${{ github.workspace }}\cmbuild\QT\${{ env.QT_VERSION }}\msvc2019_64" -DLibObs_DIR="${{ github.workspace }}\obs-studio\build64\libobs" -DLIBOBS_INCLUDE_DIR="${{ github.workspace }}\obs-studio\libobs" -DLIBOBS_LIB="${{ github.workspace }}\obs-studio\build64\libobs\RelWithDebInfo\obs.lib" -DOBS_FRONTEND_LIB="${{ github.workspace }}\obs-studio\build64\UI\obs-frontend-api\RelWithDebInfo\obs-frontend-api.lib" ..
      - name: 'Configure obs-midi 32-bit'
        working-directory: ${{ github.workspace }}/obs-midi
        run: |
          mkdir .\build32
          cd .\build32
          cmake -G "${{ env.CMAKE_GENERATOR }}" -A Win32 -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DQTDIR="${{ github.workspace }}\cmbuild\QT\${{ env.QT_VERSION }}\msvc2019" -DLibObs_DIR="${{ github.workspace }}\obs-studio\build32\libobs" -DLIBOBS_INCLUDE_DIR="${{ github.workspace }}\obs-studio\libobs" -DLIBOBS_LIB="${{ github.workspace }}\obs-studio\build32\libobs\RelWithDebInfo\obs.lib" -DOBS_FRONTEND_LIB="${{ github.workspace }}\obs-studio\build32\UI\obs-frontend-api\RelWithDebInfo\obs-frontend-api.lib" ..
      - name: 'Build obs-midi 64-bit'
        working-directory: ${{ github.workspace }}/obs-midi
        run: msbuild /m /p:Configuration=RelWithDebInfo .\build64\obs-midi.sln
      - name: 'Build obs-midi 32-bit'
        working-directory: ${{ github.workspace }}/obs-midi
        run: msbuild /m /p:Configuration=RelWithDebInfo .\build32\obs-midi.sln
      - name: 'Set release filename'
        shell: bash
        run: |
          FILENAME="obs-midi-${{ env.GIT_HASH }}-Windows"
          echo "::set-env name=WIN_FILENAME::$FILENAME"
      - name: 'Package obs-midi'
        working-directory: ${{ github.workspace }}/obs-midi
        run: |
          mkdir package
          cd package
          7z a "${{ env.WIN_FILENAME }}.zip"  "..\release\*"
          iscc ..\installer\installer.iss /O. /F"${{ env.WIN_FILENAME }}-Installer"
      - name: 'Publish ${{ env.WIN_FILENAME }}.zip'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: '${{ env.GIT_HASH }}-Windows'
          path: ${{ github.workspace }}/obs-midi/package/*.zip
      - name: 'Publish ${{ env.WIN_FILENAME }}-Installer.exe'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: '${{ env.GIT_HASH }}-Windows-Installer'
          path: ${{ github.workspace }}/obs-midi/package/*.exe
  ubuntu64:
    name: "Linux/Ubuntu 64-bit"
    runs-on: [ubuntu-latest]
    env:
      isCI: true
    if: contains(github.event.head_commit.message, '[skip ci]') != true
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/obs-midi
          submodules: 'recursive'
      - name: 'Checkout OBS'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: ${{ github.workspace }}/obs-studio
          submodules: 'recursive'
      - name: 'Get OBS-Studio git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=OBS_GIT_BRANCH::$(git rev-parse --abbrev-ref HEAD)
          echo ::set-env name=OBS_GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=OBS_GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Checkout last OBS-Studio release (${{ env.OBS_GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git checkout ${{ env.OBS_GIT_TAG }}
          git submodule update
      - name: 'Get obs-midi git info'
        working-directory: ${{ github.workspace }}/obs-midi
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}
          echo ::set-env name=GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=GIT_TAG::$(git describe --tags --abbrev=0)
          echo ::set-env name=isCI::true
      - name: 'Install prerequisites (Apt)'
        shell: bash
        run: |
          sudo dpkg --add-architecture amd64
          sudo apt-get -qq update
          sudo apt-get install -y \
           build-essential \
           checkinstall \
           cmake \
           libasound2-dev \
           libavcodec-dev \
           libavdevice-dev \
           libavfilter-dev \
           libavformat-dev \
           libavutil-dev \
           libcurl4-openssl-dev \
           libfdk-aac-dev \
           libfontconfig-dev \
           libfreetype6-dev \
           libgl1-mesa-dev \
           libjack-jackd2-dev \
           libjansson-dev \
           libluajit-5.1-dev \
           libpulse-dev \
           libqt5x11extras5-dev \
           libspeexdsp-dev \
           libswresample-dev \
           libswscale-dev \
           libudev-dev \
           libv4l-dev \
           libva-dev \
           libvlc-dev \
           libx11-dev \
           libx264-dev \
           libx11-xcb-dev \
           libx11-xcb1 \
           libxcb-randr0-dev \
           libxcb-shm0-dev \
           libxcb-xinerama0-dev \
           libxcomposite-dev \
           libxinerama-dev \
           libmbedtls-dev \
           pkg-config \
           python3-dev \
           qtbase5-dev \
           libqt5svg5-dev \
           swig
      - name: 'Configure OBS-Studio'
        working-directory: ${{ github.workspace }}/obs-studio
        shell: bash
        run: |
          mkdir ./build
          cd ./build
          cmake -DDISABLE_PLUGINS=YES -DENABLE_SCRIPTING=NO -DUNIX_STRUCTURE=YES -DCMAKE_INSTALL_PREFIX=/usr ..
      - name: 'Build OBS-Studio'
        working-directory: ${{ github.workspace }}/obs-studio
        shell: bash
        run: |
          set -e
          cd ./build
          make -j4 libobs obs-frontend-api
      - name: 'Install OBS-Studio'
        working-directory: ${{ github.workspace }}/obs-studio
        shell: bash
        run: |
          cd ./build
          sudo cp ./libobs/libobs.so /usr/lib
          sudo cp ./UI/obs-frontend-api/libobs-frontend-api.so /usr/lib
          sudo mkdir -p /usr/include/obs
          sudo cp ../UI/obs-frontend-api/obs-frontend-api.h /usr/include/obs/obs-frontend-api.h
      - name: 'Configure obs-midi'
        working-directory: ${{ github.workspace }}/obs-midi
        shell: bash
        run: |
          mkdir ./build
          cd ./build
          cmake -DLIBOBS_INCLUDE_DIR=${{ github.workspace }}/obs-studio/libobs -DCMAKE_INSTALL_PREFIX=/usr ..
      - name: 'Build obs-midi'
        working-directory: ${{ github.workspace }}/obs-midi
        shell: bash
        run: |
          set -e
          cd ./build
          make -j4
      - name: 'Set release filename'
        shell: bash
        run: |
          FILENAME="obs-midi-0${{ env.GIT_HASH }}-1_amd64.deb"
          echo "::set-env name=LINUX_FILENAME::$FILENAME"
      - name: 'Package ${{ env.LINUX_FILENAME }}'
        if: success()
        working-directory: ${{ github.workspace }}/obs-midi
        shell: bash
        run: |
          VERSION="${{ env.GIT_HASH }}"
          cd ./build
          sudo checkinstall -y --type=debian --fstrans=no -nodoc \
              --backup=no --deldoc=yes --install=no --pkgname=obs-midi --pkgversion=0$VERSION \
              --pkglicense="GPLv2.0" --maintainer="${{ github.event.pusher.email }}" --pkggroup="video" \
              --pkgsource="${{ github.event.repository.html_url }}" \
              --requires="obs-studio,libqt5core5a,libqt5widgets5,qt5-image-formats-plugins" \
              --pakdir="../package"
          sudo chmod ao+r ../package/*
          cd -
      - name: 'Tar ${{ env.LINUX_FILENAME }}'
        if: success()
        working-directory: ${{ github.workspace }}/obs-midi
        shell: bash
        run: |
          VERSION="${{ env.GIT_HASH }}"
          cd ./build
          mkdir -p obs-studio/plugins/obs-midi/bin/64bit/
          cp ./obs-midi.so obs-studio/plugins/obs-midi/bin/64bit/
          tar -czvf obs-midi-Linux-${{ env.GIT_HASH }}-x64.tar.gz obs-studio
          pwd

      - name: 'Publish Deb'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: '${{ env.GIT_HASH }}-linux'
          path: '${{ github.workspace }}/obs-midi/package/*.deb'
      - name: 'Publish Tar'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: '${{ env.GIT_HASH }}-linux'
          path: '${{ github.workspace }}/obs-midi/build/*.tar.gz'
  macos64:
    name: "macOS 64-bit"
    runs-on: [macos-latest]
    env:
      MACOS_DEPS_VERSION: '2020-04-18'
      QT_VERSION: '5.14.1'
      isCI: true
    if: contains(github.event.head_commit.message, '[skip ci]') != true
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/obs-midi
          submodules: 'recursive'
      - name: 'Checkout OBS'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: ${{ github.workspace }}/obs-studio
          submodules: 'recursive'
      - name: 'Get OBS-Studio git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=OBS_GIT_BRANCH::$(git rev-parse --abbrev-ref HEAD)
          echo ::set-env name=OBS_GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=OBS_GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Checkout last OBS-Studio release (${{ env.OBS_GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git checkout ${{ env.OBS_GIT_TAG }}
          git submodule update
      - name: 'Get obs-midi git info'
        working-directory: ${{ github.workspace }}/obs-midi
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}
          echo ::set-env name=GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Install prerequisites (Homebrew)'
        shell: bash
        run: |
          brew bundle --file ${{ github.workspace }}/obs-midi/CI/macos/Brewfile
      - name: 'Install prerequisite: Pre-built OBS dependencies'
        shell: bash
        run: |
          curl -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.MACOS_DEPS_VERSION }}/osx-deps-${{ env.MACOS_DEPS_VERSION }}.tar.gz
          tar -xf ${{ github.workspace }}/osx-deps-${{ env.MACOS_DEPS_VERSION }}.tar.gz -C "/tmp"
      - name: 'Configure OBS Studio'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11 -DENABLE_SCRIPTING=NO -DDepsPath=/tmp/obsdeps -DCMAKE_PREFIX_PATH=/usr/local/Cellar/qt/${{ env.QT_VERSION }}/lib/cmake ..
      - name: 'Build OBS Studio libraries'
        working-directory: ${{ github.workspace }}/obs-studio
        shell: bash
        run: |
          set -e
          cd ./build
          make -j4 libobs obs-frontend-api
      - name: 'Configure obs-midi'
        working-directory: ${{ github.workspace }}/obs-midi
        shell: bash
        run: |
          mkdir build
          cd build
          cmake -DQTDIR=/usr/local/Cellar/qt/${{ env.QT_VERSION }} -DLIBOBS_INCLUDE_DIR=${{ github.workspace }}/obs-studio/libobs -DLIBOBS_LIB=${{ github.workspace }}/obs-studio/libobs -DOBS_FRONTEND_LIB="${{ github.workspace }}/obs-studio/build/UI/obs-frontend-api/libobs-frontend-api.dylib" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=/usr ..
      - name: 'Build obs-midi'
        working-directory: ${{ github.workspace }}/obs-midi
        shell: bash
        run: |
          set -e
          cd ./build
          make -j4
      - name: 'Install prerequisite: Packages app'
        if: success()
        shell: bash
        run: |
          curl -L -O https://s3-us-west-2.amazonaws.com/obs-nightly/Packages.pkg
          sudo installer -pkg ${{ github.workspace }}/Packages.pkg -target /
      - name: 'Set release filename'
        if: success()
        shell: bash
        run: |
          FILENAME_UNSIGNED="obs-midi-${{ env.GIT_HASH }}-macOS-Unsigned.pkg"
          FILENAME="obs-midi-${{ env.GIT_HASH }}-macOS.pkg"
          echo "::set-env name=MAC_FILENAME_UNSIGNED::$FILENAME_UNSIGNED"
          echo "::set-env name=MAC_FILENAME::$FILENAME"
      - name: 'Fix linked dynamic library paths'
        if: success()
        working-directory: ${{ github.workspace }}/obs-midi
        shell: bash
        run: |
          install_name_tool -change /usr/local/opt/qt/lib/QtWidgets.framework/Versions/5/QtWidgets @executable_path/../Frameworks/QtWidgets.framework/Versions/5/QtWidgets ./build/obs-midi.so
          install_name_tool -change /usr/local/opt/qt/lib/QtGui.framework/Versions/5/QtGui @executable_path/../Frameworks/QtGui.framework/Versions/5/QtGui ./build/obs-midi.so
          install_name_tool -change /usr/local/opt/qt/lib/QtCore.framework/Versions/5/QtCore @executable_path/../Frameworks/QtCore.framework/Versions/5/QtCore ./build/obs-midi.so
          install_name_tool -change /usr/local/opt/jack/lib/libjack.0.dylib /usr/local/lib/libjack.0.dylib ./build/obs-midi.so
          echo "Dependencies for obs-midi"
          otool -L ./build/obs-midi.so
      - name: 'Install Apple Developer Certificate'
        if: success()
        uses: apple-actions/import-codesign-certs@253ddeeac23f2bdad1646faac5c8c2832e800071
        with:
          p12-file-base64: ${{ secrets.MACOS_CERT_CODESIGN }}
          p12-password: ${{ secrets.MACOS_CERT_PASS }}
      - name: 'Code signing'
        if: success()
        working-directory: ./obs-midi
        shell: bash
        run: |
          set -e
          security find-identity -v -p codesigning
          codesign --sign "${{ secrets.MACOS_IDENT_CODESIGN }}" ./build/obs-midi.so
          packagesbuild ./CI/macos/obs-midi.pkgproj
          mv ./release/obs-midi.pkg ./release/${{ env.MAC_FILENAME_UNSIGNED }}
          productsign --sign "${{ secrets.MACOS_IDENT_INSTALLER }}" ./release/${{ env.MAC_FILENAME_UNSIGNED }} ./release/${{ env.MAC_FILENAME }}
          rm ./release/${{ env.MAC_FILENAME_UNSIGNED }}

      - name: 'Notarization'
        if: success() &&  github.ref == 'refs/heads/release'
        working-directory: ./obs-midi
        shell: bash
        run: |
          set -e
          echo "store password"

          xcrun altool  --store-password-in-keychain-item "AC_PASSWORD" -u "${{ secrets.MACOS_IDENT_USER }}" -p "${{ secrets.MACOS_AC_PASS  }}"
          echo "xcnotary precheck"
          xcnotary precheck ./release/${{ env.MAC_FILENAME }}
          echo "xcnotary notarize Currently enabled"
          if [ "$?" -eq 0 ]; then xcnotary notarize ./release/${{ env.MAC_FILENAME }} -d "cpyarger@gmail.com" -k "AC_PASSWORD"; fi

      - name: 'Publish ${{ env.MAC_FILENAME }} artifact'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: '${{ env.GIT_HASH }}-macOS'
          path: ${{ github.workspace }}/obs-midi/release/*.pkg

  make-release:
    if: github.ref == 'refs/heads/release'
    name: 'Create and upload release'
    runs-on: [ubuntu-latest]
    needs: [windows, ubuntu64, macos64]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/obs-midi
      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog
      - name: 'Get obs-midi git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-midi
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}
          echo ::set-env name=GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Get the version'
        shell: bash
        id: get_version
        run: |
          echo ::set-env name=TAG_VERSION::${GITHUB_REF/refs\/tags\//}
      - name: 'Create Release'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: tag-${{ env.GIT_HASH }}
          body: |
            # OBS-MIDI
            Use MIDI devices to trigger events in OBS and visa versa.

            # More information

            Take a look at the base repo for More information

            # Currently a WIP
            Windows and Linux are tested working. Mac has not been tested
            # Special thanks to the following projects
            * [RTMidi17](https://github.com/jcelerier/RtMidi17) An amazing modernized RTMIDI library
            * [OBSWebsocket](https://github.com/Palakis/obs-websocket/) from which much code was borrowed for interfacing with OBS
            * [MIDItoOBS](https://github.com/lebaston100/MIDItoOBS) Where I got my start playing with this
            # Changes
            ${{ steps.Changelog.outputs.changelog }}
          release_name: obs-midi ALPHA 2 ${{ env.GIT_HASH }}
          draft: false
          prerelease: false
      - name: 'Download release artifacts'
        uses: actions/download-artifact@v2-preview
      - name: 'Upload Windows .zip artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GIT_HASH }}-Windows/obs-midi-${{ env.GIT_HASH }}-Windows.zip
          asset_name: obs-midi-${{ env.GIT_HASH }}-Windows.zip
          asset_content_type: application/zip
      - name: 'Upload Windows .exe artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GIT_HASH}}-Windows-Installer/obs-midi-${{ env.GIT_HASH }}-Windows-Installer.exe
          asset_name: obs-midi-${{ env.GIT_HASH }}-Windows-Installer.exe
          asset_content_type: application/zip
      - name: 'check out directories'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-midi
        run: |
          cd ${{ github.workspace }}
          ls -la
          echo ${{ github.workspace }}/${{ env.GIT_HASH }}-linux
          ls -la ${{ github.workspace }}/${{ env.GIT_HASH }}-linux
          echo ${{ github.workspace }}/${{ env.GIT_HASH }}-macOS
          ls -la ${{ github.workspace }}/${{ env.GIT_HASH }}-macOS
          mv ${{ github.workspace }}/${{ env.GIT_HASH }}-linux/*.deb ${{ github.workspace }}/${{ env.GIT_HASH }}-linux/obs-midi-${{ env.GIT_HASH }}-1_amd64.deb
      - name: 'Upload macOS artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GIT_HASH }}-macOS/obs-midi-${{ env.GIT_HASH }}-macOS.pkg
          asset_name: obs-midi-${{ env.GIT_HASH }}-macOS.pkg
          asset_content_type: application/octet-stream
      - name: 'Upload Linux artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GIT_HASH }}-linux/obs-midi-${{ env.GIT_HASH }}-1_amd64.deb
          asset_name: obs-midi-${{ env.GIT_HASH }}-1_amd64.deb
          asset_content_type: application/octet-stream
      - name: 'Upload Linux tar artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GIT_HASH }}-linux/obs-midi-Linux-${{ env.GIT_HASH }}-x64.tar.gz
          asset_name: obs-midi-Linux-${{ env.GIT_HASH }}-x64.tar.gz
          asset_content_type: application/octet-stream
      - name: 'Clean old releases'
        uses: dev-drprasad/delete-older-releases@v0.1.0
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
