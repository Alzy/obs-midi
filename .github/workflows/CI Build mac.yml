name: 'CI MacOS Build'

on:
  push:
    branches:

      - test2
    paths-ignore:
      - 'docs/**'
  pull_request:
    paths-ignore:
      - '**.md'

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
jobs:
  macos64:
    name: "macOS 64-bit"
    runs-on: [macos-latest]
    env:
      MACOS_DEPS_VERSION: '2020-04-18'
      QT_VERSION: '5.14.1'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/obs-midi
          submodules: 'recursive'
      - name: 'Checkout OBS'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: ${{ github.workspace }}/obs-studio
          submodules: 'recursive'
      - name: 'Get OBS-Studio git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=OBS_GIT_BRANCH::$(git rev-parse --abbrev-ref HEAD)
          echo ::set-env name=OBS_GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=OBS_GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Checkout last OBS-Studio release (${{ env.OBS_GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git checkout ${{ env.OBS_GIT_TAG }}
          git submodule update
      - name: 'Get obs-midi git info'
        working-directory: ${{ github.workspace }}/obs-midi
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}
          echo ::set-env name=GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Install prerequisites (Homebrew)'
        shell: bash
        run: |
          brew bundle --file ${{ github.workspace }}/obs-midi/CI/macos/Brewfile
      - name: 'Install prerequisite: Pre-built OBS dependencies'
        shell: bash
        run: |
          curl -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.MACOS_DEPS_VERSION }}/osx-deps-${{ env.MACOS_DEPS_VERSION }}.tar.gz
          tar -xf ${{ github.workspace }}/osx-deps-${{ env.MACOS_DEPS_VERSION }}.tar.gz -C "/tmp"
      - name: 'Configure OBS Studio'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11 -DENABLE_SCRIPTING=NO -DDepsPath=/tmp/obsdeps -DCMAKE_PREFIX_PATH=/usr/local/Cellar/qt/${{ env.QT_VERSION }}/lib/cmake ..
      - name: 'Build OBS Studio libraries'
        working-directory: ${{ github.workspace }}/obs-studio
        shell: bash
        run: |
          set -e
          cd ./build
          make -j4 libobs obs-frontend-api
      - name: 'Configure obs-midi'
        working-directory: ${{ github.workspace }}/obs-midi
        shell: bash
        run: |
          mkdir build
          cd build
          cmake -DQTDIR=/usr/local/Cellar/qt/${{ env.QT_VERSION }} -DLIBOBS_INCLUDE_DIR=${{ github.workspace }}/obs-studio/libobs -DLIBOBS_LIB=${{ github.workspace }}/obs-studio/libobs -DOBS_FRONTEND_LIB="${{ github.workspace }}/obs-studio/build/UI/obs-frontend-api/libobs-frontend-api.dylib" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=/usr ..
      - name: 'Build obs-midi'
        working-directory: ${{ github.workspace }}/obs-midi
        shell: bash
        run: |
          set -e
          cd ./build
          make -j4
      - name: 'Install prerequisite: Packages app'
        if: success()
        shell: bash
        run: |
          curl -L -O https://s3-us-west-2.amazonaws.com/obs-nightly/Packages.pkg
          sudo installer -pkg ${{ github.workspace }}/Packages.pkg -target /

      - name: 'Fix linked dynamic library paths'
        if: success()
        working-directory: ${{ github.workspace }}/obs-midi
        shell: bash
        run: |
          install_name_tool -change /usr/local/opt/qt/lib/QtWidgets.framework/Versions/5/QtWidgets @executable_path/../Frameworks/QtWidgets.framework/Versions/5/QtWidgets ./build/obs-midi.so
          install_name_tool -change /usr/local/opt/qt/lib/QtGui.framework/Versions/5/QtGui @executable_path/../Frameworks/QtGui.framework/Versions/5/QtGui ./build/obs-midi.so
          install_name_tool -change /usr/local/opt/qt/lib/QtCore.framework/Versions/5/QtCore @executable_path/../Frameworks/QtCore.framework/Versions/5/QtCore ./build/obs-midi.so
          echo "Dependencies for obs-midi"
          otool -L ./build/obs-midi.so
      - name: 'Install Apple Developer Certificate'
        if: success()
        uses: apple-actions/import-codesign-certs@253ddeeac23f2bdad1646faac5c8c2832e800071
        with:
          p12-file-base64: ${{ secrets.MACOS_CERT_CODESIGN }}
          p12-password: ${{ secrets.MACOS_CERT_PASS }}
      - name: 'Code signing'
        if: success()
        working-directory: ./obs-midi
        shell: bash
        run: |
          set -e
          codesign --sign "${{ secrets.MACOS_IDENT_CODESIGN }}" ./build/obs-midi.so
          packagesbuild ./CI/macos/obs-midi.pkgproj
          mv ./release/obs-midi.pkg ./release/${{ env.MAC_FILENAME_UNSIGNED }}
          productsign --sign "${{ secrets.MACOS_IDENT_INSTALLER }}" ./release/${{ env.MAC_FILENAME_UNSIGNED }} ./release/${{ env.MAC_FILENAME }}
          rm ./release/${{ env.MAC_FILENAME_UNSIGNED }}
          
      - name: 'Notarization'
        if: success()
        working-directory: ./obs-midi
        shell: bash
        run: |
          set -e
          xcrun altool --store-password-in-keychain-item "AC_PASSWORD" -u "${{ secrets.MACOS_IDENT_USER }}" -p "${{ secrets.MACOS_IDENT_PASS }}"
          xcnotary precheck ./release/${{ env.MAC_FILENAME }}
          if [ "$?" -eq 0 ]; then xcnotary notarize ./release/${{ env.MAC_FILENAME }} --developer-account "${{ secrets.MACOS_IDENT_USER }}" --developer-password-keychain-item "AC_PASSWORD" --provider "${{ secrets.MACOS_IDENT_PROVIDER }}"; fi

      - name: 'Publish ${{ env.MAC_FILENAME }} artifact'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: '${{ env.GIT_TAG }}-macOS'
          path: ${{ github.workspace }}/obs-midi/release/*.pkg
