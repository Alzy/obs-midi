name: 'CI Make release'

on:
  push:
    branches:
      - release
      - master
      - test2
    paths-ignore:
      - 'docs/**'
  pull_request:
    paths-ignore:
      - '**.md'

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
jobs:
  make-release:
    name: 'Create and upload release'
    runs-on: [ubuntu-latest]
    needs: [windows, ubuntu64, macos64]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/obs-midi
      - name: 'Get obs-midi git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-midi
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}
          echo ::set-env name=GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Get the version'
        shell: bash
        id: get_version
        run: |
          echo ::set-env name=TAG_VERSION::${GITHUB_REF/refs\/tags\//}
      - name: 'Create Release'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: tag-${{ env.GIT_HASH }}
          body_path: ${{ github.workspace }}/obs-midi/docs/releasehead.md
          release_name: obs-midi ALPHA 2 ${{ env.GIT_HASH }}
          draft: false
          prerelease: true
      - name: 'Download release artifacts'
        uses: actions/download-artifact@v2-preview
      - name: 'Upload Windows .zip artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GIT_HASH }}-Windows/obs-midi-${{ env.GIT_HASH }}-Windows.zip
          asset_name: obs-midi-${{ env.GIT_HASH }}-Windows.zip
          asset_content_type: application/zip
      - name: 'Upload Windows .exe artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GIT_HASH}}-Windows-Installer/obs-midi-${{ env.GIT_HASH }}-Windows-Installer.exe
          asset_name: obs-midi-${{ env.GIT_HASH }}-Windows-Installer.exe
          asset_content_type: application/zip
      - name: 'check out directories'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-midi
        run: |
          cd ${{ github.workspace }}
          ls -la
          echo "linux"
          ls -la ${{ github.workspace }}/${{ env.GIT_HASH }}-linux
          echo "macos"
          ls -la ${{ github.workspace }}/${{ env.GIT_HASH }}-macOS
          mv ${{ github.workspace }}/${{ env.GIT_HASH }}-linux/*.deb ${{ github.workspace }}/${{ env.GIT_HASH }}-linux/obs-midi-${{ env.GIT_HASH }}-1_amd64.deb
      - name: 'Upload macOS artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GIT_HASH }}-macOS/obs-midi-${{ env.GIT_HASH }}-macOS-Unsigned.pkg
          asset_name: obs-midi-${{ env.GIT_HASH }}-macOS-Unsigned.pkg
          asset_content_type: application/octet-stream
      - name: 'Upload Linux artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GIT_HASH }}-linux/obs-midi-${{ env.GIT_HASH }}-1_amd64.deb
          asset_name: obs-midi-${{ env.GIT_HASH }}-1_amd64.deb
          asset_content_type: application/octet-stream
